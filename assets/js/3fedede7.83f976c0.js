(self.webpackChunksuperbench_website=self.webpackChunksuperbench_website||[]).push([[7774],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),s=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,h=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(h,l(l({ref:t},c),{},{components:r})):n.createElement(h,l({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3433:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return u},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),l=["components"],u={id:"data-diagnosis"},o="Data Diagnosis",s={unversionedId:"user-tutorial/data-diagnosis",id:"user-tutorial/data-diagnosis",isDocsHomePage:!1,title:"Data Diagnosis",description:"Introduction",source:"@site/../docs/user-tutorial/data-diagnosis.md",sourceDirName:"user-tutorial",slug:"/user-tutorial/data-diagnosis",permalink:"/superbenchmark/docs/user-tutorial/data-diagnosis",editUrl:"https://github.com/microsoft/superbenchmark/edit/main/website/../docs/user-tutorial/data-diagnosis.md",version:"current",frontMatter:{id:"data-diagnosis"},sidebar:"docs",previous:{title:"System Config Info",permalink:"/superbenchmark/docs/user-tutorial/system-config"},next:{title:"Result Summary",permalink:"/superbenchmark/docs/user-tutorial/result-summary"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Input",id:"input",children:[{value:"rule file",id:"rule-file",children:[]}]},{value:"Output",id:"output",children:[]}],p={toc:c};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"data-diagnosis"},"Data Diagnosis"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This tool is to filter the defective machines automatically from thousands of benchmarking results according to rules defined in ",(0,i.kt)("strong",{parentName:"p"},"rule file"),"."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"../getting-started/installation"},"Install SuperBench")," on the local machine.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Prepare the raw data, rule file, baseline file under current path or somewhere on the local machine.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"After installing the Superbnech and the files are ready, you can start to filter the defective machines automatically using  ",(0,i.kt)("inlineCode",{parentName:"p"},"sb result diagnosis")," command. The detailed command can be found from ",(0,i.kt)("a",{parentName:"p",href:"../cli"},"SuperBench CLI"),"."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"sb result diagnosis --data-file ./results-summary.jsonl --rule-file ./rule.yaml --baseline-file ./baseline.json --output-file-format excel --output-dir ${output-dir}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"After the command finished, you can find the output result file named 'diagnosis_summary.xlsx' / 'diagnosis_summary.json' under ${output_dir}."))),(0,i.kt)("h2",{id:"input"},"Input"),(0,i.kt)("p",null,"The input mainly includes 3 files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"raw data"),": jsonl file including multiple nodes' results automatically generated by SuperBench runner."),(0,i.kt)("p",{parentName:"li"}," ",(0,i.kt)("inlineCode",{parentName:"p"},"Tips"),": this file can be found at ${output-dir}/results-summary.jsonl after each successful run.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"rule file"),": It uses YAML format and includes each metrics' rules to filter defective machines for diagnosis.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"baseline file"),": json file including the baseline values for the metrics."),(0,i.kt)("p",{parentName:"li"}," ",(0,i.kt)("inlineCode",{parentName:"p"},"Tips"),": this file for some representative machine types will be published in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/superbench-results/tree/main"},"SuperBench Results Repo")," with the release of Superbench."))),(0,i.kt)("h3",{id:"rule-file"},"rule file"),(0,i.kt)("p",null,"This section describes how to write rules in ",(0,i.kt)("strong",{parentName:"p"},"rule file"),"."),(0,i.kt)("p",null,"The convention is the same with ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/superbenchmark/docs/superbench-config"},"SuperBench Config File"),", please view it first."),(0,i.kt)("p",null,"Here is an overview of the rule file structure:"),(0,i.kt)("p",null,"scheme:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"version: string\nsuperbench:\n  var:\n    ${var_name}: dict\n  rules:\n    ${rule_name}:\n      function: string\n      criteria: string\n      store: (optional)bool\n      categories: string\n      metrics:\n        - ${benchmark_name}/regex\n        - ${benchmark_name}/regex\n        ...\n")),(0,i.kt)("p",null,"example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# SuperBench rules\nversion: v0.4\nsuperbench:\n  rules:\n    failure-rule:\n      function: value\n      criteria: lambda x:x>0\n      categories: Failed\n      metrics:\n        - kernel-launch/return_code\n        - mem-bw/return_code\n        - nccl-bw/return_code\n        - ib-loopback/return_code\n    rule0:\n    # Rule 0: If KernelLaunch suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x>0.05\n      categories: KernelLaunch\n      metrics:\n        - kernel-launch/event_overhead:\\d+\n        - kernel-launch/wall_overhead:\\d+\n    rule1:\n    # Rule 1: If H2D_Mem_BW or D2H_Mem_BW test suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x<-0.05\n      categories: Mem\n      metrics:\n        - mem-bw/H2D_Mem_BW:\\d+\n        - mem-bw/D2H_Mem_BW:\\d+\n    rule2:\n    # Rule 2: If NCCL_BW suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x<-0.05\n      categories: NCCL\n      metircs:\n        - nccl-bw/allreduce_8589934592_busbw:0\n    rule3:\n    # Rule 3: If GPT-2, BERT suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x<-0.05\n      categories: Model\n      metrics:\n        - bert_models/pytorch-bert-base/throughput_train_float(32|16)\n        - bert_models/pytorch-bert-large/throughput_train_float(32|16)\n        - gpt_models/pytorch-gpt-large/throughput_train_float(32|16)\n    rule4:\n      function: variance\n      criteria: "lambda x:x<-0.05"\n      store: True\n      categories: CNN\n      metrics:\n        - resnet_models/pytorch-resnet.*/throughput_train_.*\n    rule5:\n      function: variance\n      criteria: "lambda x:x<-0.05"\n      store: True\n      categories: CNN\n      metrics:\n        - vgg_models/pytorch-vgg.*/throughput_train_.*\\\n    rule6:\n      function: multi_rules\n      criteria: \'lambda label:True if label["rule4"]+label["rule5"]>=2 else False\'\n      categories: CNN\n')),(0,i.kt)("p",null,"This rule file describes the rules used for data diagnosis."),(0,i.kt)("p",null,"They are firstly organized by the rule name, and each rule mainly includes several elements:"),(0,i.kt)("h4",{id:"metrics"},(0,i.kt)("inlineCode",{parentName:"h4"},"metrics")),(0,i.kt)("p",null,"The list of metrics for this rule. Each metric is in the format of ${benchmark_name}/regex, you can use regex after the first '/', but to be noticed, the benchmark name can not be a regex."),(0,i.kt)("h4",{id:"categories"},(0,i.kt)("inlineCode",{parentName:"h4"},"categories")),(0,i.kt)("p",null,"The categories belong to this rule."),(0,i.kt)("h4",{id:"criteria"},(0,i.kt)("inlineCode",{parentName:"h4"},"criteria")),(0,i.kt)("p",null,"The criterion used for this rule, which indicates how to compare the data with the baseline value for each metric. The format should be a lambda function supported by Python."),(0,i.kt)("h4",{id:"store"},(0,i.kt)("inlineCode",{parentName:"h4"},"store")),(0,i.kt)("p",null,"True if the current rule is not used alone to filter the defective machine, but will be used by other subsequent rules. False(default) if this rule is used to label the defective machine directly."),(0,i.kt)("h4",{id:"function"},(0,i.kt)("inlineCode",{parentName:"h4"},"function")),(0,i.kt)("p",null,"The function used for this rule."),(0,i.kt)("p",null,"3 types of rules are supported currently:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"variance"),": the rule is to check if the variance between raw data and baseline violates the criteria. variance = (raw data - criteria) / criteria"),(0,i.kt)("p",{parentName:"li"},"For example, if the 'criteria' is ",(0,i.kt)("inlineCode",{parentName:"p"},"lambda x:x>0.05"),", the rule is that if the variance is larger than 5%, it should be defective.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"value"),": the rule is to check if the raw data violate the criteria."),(0,i.kt)("p",{parentName:"li"},"For example, if the 'criteria' is ",(0,i.kt)("inlineCode",{parentName:"p"},"lambda x:x>0"),", the rule is that if the raw data is larger than the 0, it should be defective.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"multi_rules"),": the rule is to check if the combined results of multiple previous rules and metrics violate the criteria."),(0,i.kt)("p",{parentName:"li"},"For example, if the 'criteria' is 'lambda label:True if label",'["rule4"]',"+label",'["rule5"]',">=2 else False', the rule is that if the sum of labeled metrics in rule4 and rule5 is larger than 2, it should be defective."))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Tips"),": you must contain a default rule for ${benchmark_name}/return_code as the above in the example, which is used to identify failed tests."),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"We support different output formats for filtering the defective machines including jsonl, excel, etc. The output includes all defective machines' information including index, failure category, failure details, and detailed metrics."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"index: the name of defective machines.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Category: categories defined in the rule.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Defective Details: all violated metrics including metric data and related rule.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"${metric}: the data of the metrics defined in the rule file. If the rule is ",(0,i.kt)("inlineCode",{parentName:"p"},"variance"),", the form of the data is variance in percentage; if the rule is ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),", the form of the data is raw data."))))}d.isMDXComponent=!0}}]);